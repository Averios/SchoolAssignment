/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package FrontEnd;

import ShareClient.CommandIn;
import ShareClient.CommandOut;
import ShareClient.StatusData;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author revant
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        theStatus = new StatusTableModel();
        initComponents();
        this.setTitle("Share Client");
        FileChooser = new JFileChooser();
        FileFilter all = new FileNameExtensionFilter("All files", "*");
        FileChooser.addChoosableFileFilter(all);
        FileChooser.setMultiSelectionEnabled(true);
        UploadButton.addActionListener((ActionEvent e) -> {
            SelectFile();
        });
        ConnectButton.addActionListener((ActionEvent e) -> {
            Connect(HostField.getText(), Integer.parseInt(PortField.getText()));
        });
        RefreshButton.addActionListener((ActionEvent e) ->{
            Refresh();
        });
        SetRootButton.addActionListener((ActionEvent e) ->{
            setRoot();
        });
        SendButton.addActionListener((ActionEvent e) ->{
            SendFile();
        });
        Connect = new Socket();
        try {
            Connect.close();
        } catch (IOException ex) {
            StatusLabel.setText("Error : " + ex.getLocalizedMessage());
        }
        RootTextButton.setText(System.getProperty("user.home"));
        RootTextButton.setEditable(false);
        this.setResizable(false);
        toSend = new ArrayList<>();
        ins = null;
    }
    JFileChooser FileChooser;
    Socket Connect;
    ServerSocket Server, CommandServer;
    CommandOut Command;
    String dest;
    CommandIn ins;
    List<File> toSend;
    StatusTableModel theStatus;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ConnectPanel = new javax.swing.JPanel();
        HostLabel = new javax.swing.JLabel();
        HostField = new javax.swing.JTextField();
        PortLabel = new javax.swing.JLabel();
        PortField = new javax.swing.JTextField();
        ConnectButton = new javax.swing.JButton();
        UserLabel = new javax.swing.JLabel();
        UserField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        UploadButton = new javax.swing.JButton();
        RefreshButton = new javax.swing.JButton();
        RootTextButton = new javax.swing.JTextField();
        SetRootButton = new javax.swing.JButton();
        MainPanel = new javax.swing.JPanel();
        FilePane = new javax.swing.JScrollPane();
        FileTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        StatusTable = new javax.swing.JTable();
        SendButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        UserTable = new javax.swing.JTable();
        StatusPanel = new javax.swing.JPanel();
        StatusLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        ExitMenu = new javax.swing.JMenuItem();
        AboutMenu = new javax.swing.JMenu();
        CreditsMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        HostLabel.setText("Host :");

        PortLabel.setText("Port :");

        ConnectButton.setText("Connect");

        UserLabel.setText("User :");

        UploadButton.setText("Upload");

        RefreshButton.setText("Refresh");

        SetRootButton.setText("Set Root");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(UploadButton)
                .addGap(18, 18, 18)
                .addComponent(RootTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SetRootButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(RefreshButton)
                .addGap(74, 74, 74))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(UploadButton)
                .addComponent(RefreshButton)
                .addComponent(RootTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(SetRootButton))
        );

        javax.swing.GroupLayout ConnectPanelLayout = new javax.swing.GroupLayout(ConnectPanel);
        ConnectPanel.setLayout(ConnectPanelLayout);
        ConnectPanelLayout.setHorizontalGroup(
            ConnectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConnectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(HostLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HostField, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PortLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PortField, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(UserLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UserField)
                .addGap(38, 38, 38)
                .addComponent(ConnectButton)
                .addGap(22, 22, 22))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        ConnectPanelLayout.setVerticalGroup(
            ConnectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConnectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ConnectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HostLabel)
                    .addComponent(HostField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PortLabel)
                    .addComponent(PortField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConnectButton)
                    .addComponent(UserLabel)
                    .addComponent(UserField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        FileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "File Name", "Size", "Path"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        FilePane.setViewportView(FileTable);

        StatusTable.setModel(theStatus);
        jScrollPane2.setViewportView(StatusTable);

        SendButton.setText("Send");

        UserTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User", "Select"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(UserTable);

        javax.swing.GroupLayout MainPanelLayout = new javax.swing.GroupLayout(MainPanel);
        MainPanel.setLayout(MainPanelLayout);
        MainPanelLayout.setHorizontalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MainPanelLayout.createSequentialGroup()
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(FilePane)
                    .addComponent(SendButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        MainPanelLayout.setVerticalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(MainPanelLayout.createSequentialGroup()
                        .addComponent(FilePane, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SendButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        StatusLabel.setText("Status :");

        javax.swing.GroupLayout StatusPanelLayout = new javax.swing.GroupLayout(StatusPanel);
        StatusPanel.setLayout(StatusPanelLayout);
        StatusPanelLayout.setHorizontalGroup(
            StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StatusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(StatusLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        StatusPanelLayout.setVerticalGroup(
            StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(StatusLabel)
        );

        FileMenu.setText("File");

        ExitMenu.setText("Exit");
        FileMenu.add(ExitMenu);

        jMenuBar1.add(FileMenu);

        AboutMenu.setText("About");

        CreditsMenu.setText("Credits");
        CreditsMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreditsMenuActionPerformed(evt);
            }
        });
        AboutMenu.add(CreditsMenu);

        jMenuBar1.add(AboutMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(StatusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(79, 79, 79))
                    .addComponent(ConnectPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ConnectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(MainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(StatusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CreditsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreditsMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CreditsMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainWindow().setVisible(true);
        });
    }

    private void SelectFile() {
        int retval = FileChooser.showDialog(null, "Open File");
        if (retval == JFileChooser.APPROVE_OPTION) {
            File[] selected = FileChooser.getSelectedFiles();
            DefaultTableModel model = (DefaultTableModel) FileTable.getModel();
            for(File now : selected){
                toSend.add(now);
                model.addRow(new Object[]{now.getName(), now.length(), now.getAbsolutePath()});
            }
        }
    }
    
    private void SendFile(){
        DefaultTableModel model = (DefaultTableModel) UserTable.getModel();
        List<String> Receiver = new ArrayList<>();
        for(int i = 0; i < model.getRowCount(); i++){
            if((boolean)model.getValueAt(i, 1)){
                Receiver.add((String) model.getValueAt(i, 0));
            }
        }
        try{
            for(File now : toSend){
                Command.Broadcast(now, Receiver);
                StatusData data = new StatusData(now, "Uploading");
                theStatus.addData(data);
            }
        } catch(IOException ex){
            StatusLabel.setText("Error : " + ex.getLocalizedMessage());
        }
        toSend.clear();
        model = (DefaultTableModel) FileTable.getModel();
        model.setRowCount(0);
        FileTable.revalidate();
    }

    private void Connect(String IP, int port) {
        if (!Connect.isClosed()) {
            try {
                Connect.close();
                Server.close();
                CommandServer.close();
            } catch (IOException e) {
                StatusLabel.setText("Status : " + e.getLocalizedMessage());
            }
        }
        try {
            StatusLabel.setText("Status : Connecting");
            Connect = new Socket(IP, port);
            StatusLabel.setText("Status : Connected");
            Random rand = new Random();
            int random = rand.nextInt((6000 - 1025) + 1) + 1025;
            Server = new ServerSocket(random);
            StatusLabel.setText("Status : Setting command out");
            Command = new CommandOut(Connect, Server);
            String user = UserField.getText();
            if (user != null) {
                StatusLabel.setText("Status : Setting username on server");
                Command.setUsername(user);
            }

            random = rand.nextInt((6000 - 1025) + 1) + 1025;
            CommandServer = new ServerSocket(random);
            random = rand.nextInt((6000 - 1025) + 1) + 1025;
            StatusLabel.setText("Status : Setting inbound command socket");
            ins = new CommandIn(CommandServer, random);
            
            StatusLabel.setText("Status : Starting inbound command thread");
            if(!RootTextButton.getText().equals("")){
                ins.setRootDir(RootTextButton.getText());
            }
            else{
                ins.setRootDir(System.getProperty("user.home"));
            }
            new Thread(ins).start();
            StatusLabel.setText("Status : Notify the server");
            Command.SetCommandInPort(CommandServer.getLocalPort());
            StatusLabel.setText("Status : Getting user list");
            DefaultTableModel model = (DefaultTableModel)UserTable.getModel();
            model.setRowCount(0);
            UserTable.revalidate();
            Object[] users = Command.getUserList();
            for(Object now : users){
                model.addRow(new Object[]{now, false});
            }
            StatusLabel.setText("Status : All connecting sequence compleated");
        } catch (IOException | IllegalArgumentException e) {
            System.out.println("Status : " + e.getLocalizedMessage());
            StatusLabel.setText("Error : " + e.getLocalizedMessage());
            try{
                Connect.close();
            } catch(IOException ex){
                StatusLabel.setText("Error : " + ex.getLocalizedMessage());
            }
            
        }
    }
    
    private void setRoot(){
        JFileChooser root = new JFileChooser();
        root.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int retval = root.showDialog(null, "Select");
        if(retval == JFileChooser.APPROVE_OPTION){
            String absolute = root.getSelectedFile().getAbsolutePath();
            RootTextButton.setText(absolute);
            if(ins != null)ins.setRootDir(absolute);
        }
        
    }
    
    private void Refresh(){
        if(!Connect.isClosed()){
            try {
                DefaultTableModel model = (DefaultTableModel)UserTable.getModel();
                model.setRowCount(0);
                UserTable.revalidate();
                Object[] users = Command.getUserList();
                for(Object now : users){
                    model.addRow(new Object[]{now, false});
                }
                UserTable.revalidate();
            } catch (IOException ex) {
                StatusLabel.setText("Error : " + ex.getLocalizedMessage());
            }
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu AboutMenu;
    private javax.swing.JButton ConnectButton;
    private javax.swing.JPanel ConnectPanel;
    private javax.swing.JMenuItem CreditsMenu;
    private javax.swing.JMenuItem ExitMenu;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JScrollPane FilePane;
    private javax.swing.JTable FileTable;
    private javax.swing.JTextField HostField;
    private javax.swing.JLabel HostLabel;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JTextField PortField;
    private javax.swing.JLabel PortLabel;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JTextField RootTextButton;
    private javax.swing.JButton SendButton;
    private javax.swing.JButton SetRootButton;
    private javax.swing.JLabel StatusLabel;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JTable StatusTable;
    private javax.swing.JButton UploadButton;
    private javax.swing.JTextField UserField;
    private javax.swing.JLabel UserLabel;
    private javax.swing.JTable UserTable;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
