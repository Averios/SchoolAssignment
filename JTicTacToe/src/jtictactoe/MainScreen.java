/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jtictactoe;

import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;

/**
 *
 * @author revant
 */
public class MainScreen extends javax.swing.JFrame implements ActionListener{

    /**
     * Creates new form MainScreen
     */
    String[][] maps;
    MoveTree Moves;
    JButton[][] Buttons;
    int mapSize;
    public MainScreen() {
        initComponents();
        this.ResizeButton.addActionListener(this);
        GameStatus.setText(null);
        TimeLabel.setText(null);
    }

    public void run(){
         /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ButtonPanel = new javax.swing.JPanel();
        GameStatus = new javax.swing.JLabel();
        SizeField = new javax.swing.JTextField();
        ResizeButton = new javax.swing.JButton();
        TimeLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ButtonPanel.setPreferredSize(new java.awt.Dimension(250, 250));
        ButtonPanel.setLayout(new java.awt.GridLayout(3, 3, 2, 2));

        GameStatus.setText("Jlabel1");

        SizeField.setToolTipText("");

        ResizeButton.setText("Rezise");

        TimeLabel.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(52, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(GameStatus)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ResizeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SizeField)
                            .addComponent(TimeLabel))))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(ButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(GameStatus)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(SizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ResizeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(TimeLabel)
                .addGap(71, 71, 71))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ButtonPanel;
    private javax.swing.JLabel GameStatus;
    private javax.swing.JButton ResizeButton;
    private javax.swing.JTextField SizeField;
    private javax.swing.JLabel TimeLabel;
    // End of variables declaration//GEN-END:variables

    private void ReziseMap(){
        int size = Integer.parseInt(SizeField.getText());
        this.mapSize = size;
        if(size > 2){
            ButtonPanel.removeAll();
            ButtonPanel.setLayout(new GridLayout(size, size, 2, 2));
            Moves = new MoveTree(size);
            Moves.generateChild();
            Buttons = new JButton[size][size];
            for(int i = 0; i < size; i++){
                for(int j = 0; j < size; j++){
                    Buttons[i][j] = new JButton();
                    Buttons[i][j].setText(".");
                    Buttons[i][j].addActionListener(this);
                    ButtonPanel.add(Buttons[i][j]);
                }
            }
            ButtonPanel.updateUI();
        }
        
    }
    
    private void PlayGame(int x, int y){
        if(Moves.hasCompleated()) return;
        if(".".equals(Buttons[x][y].getText())){
            long startTime = System.nanoTime();
            Buttons[x][y].setText("X");
            GameStatus.setText(Integer.toString(x) + " " + Integer.toString(y));
            Moves = Moves.toChild(x, y);
            if(Moves.hasCompleated()){
                GameStatus.setText("Game over!");
            }
            else{
                Moves.MinMax();
                Moves.alphaBetaPruning();
                Moves = Moves.nextMove();
                int[] TheNext = Moves.getState();
                Buttons[TheNext[0]][TheNext[1]].setText("O");
                startTime = System.nanoTime() - startTime;
                TimeLabel.setText(Long.toString(startTime) + "ns");
                if(Moves.hasCompleated())GameStatus.setText("Game over!");
            }
        }
        else{
            GameStatus.setText("Invalid move!");
        }
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        JButton Pressed = (JButton) e.getSource();
        if(Pressed == this.ResizeButton){
            GameStatus.setText("Changing Layout");
            this.ReziseMap();
            GameStatus.setText("Layout changed");
        }
        else{
            boolean found = false;
            for(int i = 0; i < this.mapSize; i++){
                for(int j = 0; j < this.mapSize; j++){
                    if(Pressed == Buttons[i][j]){
                        found = true;
                        this.PlayGame(i, j);
                        break;
                    }
                }
                if(found)break;
            }
        }
        
    }
}
